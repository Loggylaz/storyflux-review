generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  displayName String
  lang        String        @default("fr")
  createdAt   DateTime      @default(now())

  sessions    Session[]
  members     RoomMember[]
  rolls       Roll[]
  events      Event[]       @relation("EventByUser")
  characters  Character[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id              String        @id @default(cuid())
  name            String
  seedWorld       String
  isPrivate       Boolean       @default(true)
  createdByUserId String
  createdAt       DateTime      @default(now())

  members         RoomMember[]
  characters      Character[]
  world           World?
  locations       Location[]
  npcs            NPC[]
  events          Event[]
  rolls           Roll[]
  journal         JournalEntry[]
  usage           Usage?
}

model RoomMember {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  role      String   @default("player") // player | gm
  joinedAt  DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Character {
  id         String   @id @default(cuid())
  roomId     String
  userId     String
  name       String
  race       String
  class      String
  level      Int      @default(1)
  ca         Int      @default(10) // classe d'armure
  js         Int      @default(10) // jet de sauvegarde placeholder
  hp         Int      @default(10)
  statsJSON  Json     // {str,dex,con,int,wis,cha}
  statesJSON Json     // {poisoned,prone,...}
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model World {
  id       String  @id @default(cuid())
  roomId   String  @unique
  seed     String
  metaJSON Json
  room     Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Location {
  id       String  @id @default(cuid())
  roomId   String
  name     String
  seed     String
  metaJSON Json
  room     Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model NPC {
  id       String  @id @default(cuid())
  roomId   String
  name     String
  seed     String
  metaJSON Json
  room     Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Event {
  id              String   @id @default(cuid())
  roomId          String
  type            String   // 'narration' | 'system' | 'combat' | ...
  payloadJSON     Json
  createdByUserId String?
  createdAt       DateTime @default(now())
  room            Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdByUser   User?    @relation("EventByUser", fields: [createdByUserId], references: [id])
}

model Roll {
  id        String   @id @default(cuid())
  roomId    String
  userId    String?
  die       String   // 'd20', 'd6', ...
  face      Int
  result    Int
  modifier  Int       @default(0)
  signature String
  createdAt DateTime  @default(now())
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id])
}

model JournalEntry {
  id        String   @id @default(cuid())
  roomId    String
  kind      String   // 'text' | 'roll' | 'system'
  content   String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Usage {
  id               String   @id @default(cuid())
  roomId           String   @unique
  ttsMsOut         Int      @default(0)
  realtimeMsOut    Int      @default(0)
  textTokensIn     Int      @default(0)
  textTokensOut    Int      @default(0)
  audioTokensIn    Int      @default(0)
  audioTokensOut   Int      @default(0)
  updatedAt        DateTime @updatedAt

  room             Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
